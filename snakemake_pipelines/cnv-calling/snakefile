import glob, os

# Get config
configfile: "config.yaml"

# Declare variables
base = config["run_info"]["base_path"]
run = config["run_info"]["run"]
library = config["run_info"]["library"]
threads = config["run_info"]["threads"]
removethreshold = config['analysis']['removethreshold']
alpha=config["cnv_calling"]["alpha"]
sdprune=config["cnv_calling"]["sdprune"]
if config['cnv_calling']['single_cell']:
	run_type='single'
else:
	run_type='bulk'
segmentation_type = config['cnv_calling']['segmentation_type']
penalty = config['cnv_calling']['penalty']
minploidy=config['cnv_calling']['minploidy']
maxploidy=config['cnv_calling']['maxploidy']
minpurity=config['cnv_calling']['minpurity']
maxpurity=config['cnv_calling']['maxpurity']
sex=config['cnv_calling']['sex']
use_rf=config['run_info']['use_rf']
rfthreshold = config['run_info']['rf_threshold']

# Full path
full_path = f"{base}{run}/{library}/"

# Scripts
cnv = config["cnv"]
plotting = config["plotting"]
randomforest = config['randomforest']

# Binsize(s), readlength and path where to find the binning files
# Path to binning files should be structured in the following way:
# /path/to/binning/files/variable_{binsize}_{readlength}_bwa.
binsize = config["analysis"]["binsize"]
readlength = config["analysis"]["readlength"]
binpath = config["bin_path"]
blacklist = binpath + config["blacklist"]
normseg = binpath + config['normseg']

# Get samples
samples = [os.path.basename(x) for x in glob.glob(full_path + "/bamfiles/" + "*bam")]
#samples = [x.replace(".dedup_q30.bam", "") for x in samples]
samples = [x.replace(".dedup.bam", "") for x in samples]

rule all:
	input:
		expand(full_path + "cnv/{binsize}/plots/genomewide/genomewideheatmap.png",
		binsize = binsize)

# Bam to bed
rule makeBed:
	input:
		#bam=full_path + "bamfiles/{sample}.dedup_q30.bam"
		bam=full_path + "bamfiles/{sample}.dedup.bam"
	output:
		bed=full_path + "cnv/bedfiles/{sample}.bed.gz"
	shell:
		#"set +o pipefail; bedtools bamtobed -i {input} | grep -E '^[0-9]|^X|^chr[0-9]|^chrX' | sort -k1,1V -k2,2n -k3,3n | gzip -c > {output}"
		"set +o pipefail; samtools view -q 30 -F 1024 -b {input} | bedtools bamtobed | \
		grep -E '^[0-9]|^X|^chr[0-9]|^chrX' | sort -k1,1V -k2,2n -k3,3n | gzip -c > {output}"
		
# Count reads per bin
rule countReads:
	input:
		bed=full_path + "cnv/bedfiles/{sample}.bed.gz",
		bins=binpath + "variable_{binsize}_" + str(readlength) + "_bwa.bed"
	output:
		temp(full_path + "cnv/{binsize}/{sample}_counts.tsv")
	params:
		sample_id="{sample}"
	shell:
		"""
		echo {params} > {output}
		bedtools intersect -nonamecheck -F 0.5 -c -a {input.bins} \
		-b {input.bed} | cut -f4 >> {output}
		"""

# Combine counts
rule combineCounts:
	input:
		expand(full_path + "cnv/{{binsize}}/{sample}_counts.tsv", binsize = binsize, sample = samples)
	output:
		full_path + "cnv/{binsize}/all-counts.tsv.gz"
	shell:
		"paste {input} | gzip > {output}"

# Set randomforest parameters
if run_type and use_rf:
	rf="--randomforest " + randomforest + " --rfthreshold " + str(rfthreshold)
else:
	rf=""

# Set segmentation parameters
if segmentation_type == "single":
	segment_params="--segmentation single --prune " + str(sdprune) + " --alpha " + str(alpha)
if segmentation_type == "joint":
	segment_params="--segmentation joint --penalty " + str(penalty)

# Copy number calling
rule callCNVs:
	input:
		counts=full_path + "cnv/{binsize}/all-counts.tsv.gz",
		blacklist=blacklist,
		bins=binpath + "variable_{binsize}_" + str(readlength) + "_bwa.bed",
		gc=binpath + "GC_variable_{binsize}_" + str(readlength) + "_bwa"
	output:
		full_path + "cnv/{binsize}/cnv.rds"
	params:
		run_type=run_type,
		binsize="{binsize}",
		rf=rf,
		normseg=normseg,
		removethreshold=removethreshold,
		minploidy=minploidy,
		maxploidy=maxploidy,
		minpurity=minpurity,
		maxpurity=maxpurity,
		sex=sex,
		segment_params=segment_params
	threads: 
		threads
	shell:
		"Rscript " + cnv + " --counts {input.counts} --bins {input.bins} --binsize {params.binsize} "
		"--blacklist {input.blacklist} --normseg {params.normseg} --gc {input.gc} "
		"{params.segment_params} --type {params.run_type} {params.rf} "
		"--removethreshold {params.removethreshold} --minploidy {params.minploidy} "
		"--maxploidy {params.maxploidy} --minpurity {params.minpurity} --maxpurity {params.maxpurity} "
		"--sex {params.sex} --threads {threads} --output {output}"

# Generate plots
rule generatePlots:
	input:
		full_path + "cnv/{binsize}/cnv.rds"
	output:
		full_path + "cnv/{binsize}/plots/genomewide/genomewideheatmap.png"
	params:
		outdir=full_path + "cnv/{binsize}/plots/",
		run_type=run_type
	threads:
		threads
	shell:
		"Rscript " + plotting + " --rds {input} --runtype {params.run_type} "
		"--threads {threads} --outdir {params.outdir}"
